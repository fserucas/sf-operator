# Generate a random number to be used on the bundle versoning
# The current version must be always higher than the previous,
# otherwise the command fails.
# "date +%s" avoids collision
- name: Generate Random Number
  ansible.builtin.command: date +%s
  register: gen_bundle_version

- name: Setting Variables
  ansible.builtin.set_fact:
    version: "v{{ gen_bundle_version.stdout }}"
    imagename: "localhost:5000/sf-operator:{{ gen_bundle_version.stdout }}"
    bundlename: "localhost:5000/sf-operator-bundle:{{ gen_bundle_version.stdout }}"
    # bundleflags must have Major.Minor.Patch format
    bundleflags: "--version {{ gen_bundle_version.stdout }}.0.0"

- name: Build and publish operator assets
  delegate_to: "{{ os_host }}"
  block:
    # Image will be available in crio and Microshift will find it
    - name: Build the operator's images
      community.general.make:
        target: "{{ item }}"
        chdir: "{{ src_dir }}"
        params:
          VERSION: "{{ version }}"
          IMG: "{{ imagename }}"
          BUNDLE_IMG: "{{ bundlename }}"
          BUNDLE_GEN_FLAGS: "{{ bundleflags }}"
      loop:
        - operator-build
        - bundle
        - bundle-build

    # operator-sdk run commands requires the bundle image to be available on registry
    - name: Push the Operator and Bundle images into the local registry
      ansible.builtin.shell: >
        podman push
        --tls-verify=false
        {{ item }}
      loop:
        - "{{ imagename }}"
        - "{{ bundlename }}"

- name: Upgrade the operator via the OLM bundle
  delegate_to: "{{ os_host }}"
  command: |
    bin/operator-sdk --verbose run
    bundle-upgrade
    --skip-tls
    --skip-tls-verify
    {{ bundlename }}
    --namespace operators
    --security-context-config restricted
    --use-http
  args:
    chdir: "{{ src_dir }}"

- name: Ensure operator expected version ready
  ansible.builtin.include_role:
    name: check-operator-version
  vars:
    upgrade_version: "v{{ gen_bundle_version.stdout }}.0.0"

# The operand (the SF resource) might enter a non ready state as the controler code might
# have changed between the published and the upgraded version. So we wait for the resource
# to be ready and we ensure that the published status field has been updated
# by the new version 'reconciledBy' field.
- name: Wait for operand ready
  ansible.builtin.include_role:
    name: health-check/check-sf-resource-ready
  vars:
    reconciledBy: "sf-operator.v{{ gen_bundle_version.stdout }}.0.0"
