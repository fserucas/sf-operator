- name: Check if config repo exists
  uri:
    url: "{{ gerrit_api }}/projects/config"
    method: GET
  ignore_errors: yes
  register: gerrit_config_project

- name: Create config project
  when: gerrit_config_project.status == 404
  uri:
    url: "{{ gerrit_api }}/a/projects/config"
    method: PUT
    user: admin
    password: "{{ gerrit_admin_password }}"
    force_basic_auth: yes
    status_code: 201
    body_format: json
    body:
      description: "Software Factory config project"
      submit_type: "INHERIT"
      owners:
        - "Administrators"

- name: Clone config project
  git:
    repo: "{{ gerrit_git }}/config.git"
    dest: "/opt/ansible/git-{{ sf_cluster_name }}-config"
    key_file: "/opt/ansible/ssh-{{ sf_cluster_name }}"
  ignore_errors: yes

- name: Create zuul.yaml
  copy:
    dest: "/opt/ansible/git-{{ sf_cluster_name }}-config/zuul.yaml"
    content: |
      - pipeline:
          name: check
          description: Check pipeline
          manager: independent
          require:
            gerrit:
              open: True
              current-patchset: True
          trigger:
            gerrit:
              - event: patchset-created
              - event: comment-added
                comment: (?i)^(Patch Set [0-9]+:)?( [\w\\+-]*)*(\n\n)?\s*(recheck|reverify)
          start:
            gerrit:
              verified: 0
          success:
            gerrit:
              verified: 1
            sqlreporter:
          failure:
            gerrit:
              verified: -1
            sqlreporter:

      - job:
          name: base
          parent: null
          description: The base job.
          roles:
            - zuul: zuul-jobs
          timeout: 1800
          attempts: 1
          nodeset:
            nodes:
              - name: container
                label: okd-fedora
  register: config_zuul

- name: Commit zuul config
  when: config_zuul is changed
  command: "git {{ item }}"
  args:
    chdir: "/opt/ansible/git-{{ sf_cluster_name }}-config"
  with_items:
    - "config user.name 'Admin'"
    - "config user.email 'admin@{{ fqdn }}'"
    - "add zuul.yaml"
    - "commit -m 'Add initial zuul config'"
    - "remote add gerrit http://admin:{{ gerrit_admin_password }}@{{ gerrit_ip }}/config"
    - "push -f --set-upstream gerrit +HEAD:master"

- name: Check if demo-project repo exists
  uri:
    url: "{{ gerrit_api }}/projects/demo-project"
    method: GET
  ignore_errors: yes
  register: gerrit_demoproject_project

- name: Create demo-project project
  when: gerrit_demoproject_project.status == 404
  uri:
    url: "{{ gerrit_api }}/a/projects/demo-project"
    method: PUT
    user: admin
    password: "{{ gerrit_admin_password }}"
    force_basic_auth: yes
    status_code: 201
    body_format: json
    body:
      description: "Software Factory demo-project project"
      submit_type: "INHERIT"
      owners:
        - "Administrators"

- name: Clone demo-project project
  git:
    repo: "{{ gerrit_git }}/demo-project.git"
    dest: "/opt/ansible/git-{{ sf_cluster_name }}-demo-project"
    key_file: "/opt/ansible/ssh-{{ sf_cluster_name }}"
  ignore_errors: yes

- name: Create README
  copy:
    dest: "/opt/ansible/git-{{ sf_cluster_name }}-demo-project/README"
    content: |
      This is a demo project blob
  register: demoproject_zuul

- name: Commit zuul demo-project
  when: demoproject_zuul is changed
  command: "git {{ item }}"
  args:
    chdir: "/opt/ansible/git-{{ sf_cluster_name }}-demo-project"
  with_items:
    - "config user.name 'Admin'"
    - "config user.email 'admin@{{ fqdn }}'"
    - "add README"
    - "commit -m 'Initialize the demo-project'"
    - "remote add gerrit http://admin:{{ gerrit_admin_password }}@{{ gerrit_ip }}/demo-project"
    - "push -f --set-upstream gerrit +HEAD:master"
